---
title: "Food customs (Cambodia) — Analysis Driver"
format:
  html:
    toc: true
    code-fold: false   # コード折りたたみはオフ（完全に隠す方針）
execute:
  echo: false         # 既定でコード非表示
  warning: false      # 警告も非表示
  message: false      # メッセージも非表示
  cache: TRUE         # 計算をキャッシュ
editor: source
---



```{r setup}
# --- in setup chunk ---
# --- in setup chunk ---
get_sha <- function(short = TRUE) {
  cmd <- if (short) "git rev-parse --short HEAD" else "git rev-parse HEAD"
  tryCatch(system(cmd, intern = TRUE), error = function(e) NA_character_)
}
SHA <- get_sha()
message("Git SHA = ", SHA)

# メタデータとしても保存（再現性ログ）
dir.create(here::here("analysis","outputs"), showWarnings = FALSE, recursive = TRUE)
jsonlite::write_json(
  list(
    git_sha = SHA,
    timestamp = as.character(Sys.time()),
    R = as.character(getRversion()),
    renv_lock = digest::digest(file = here::here("renv.lock"))
  ),
  here::here("analysis","outputs","analysis_metadata.json"),
  auto_unbox = TRUE, pretty = TRUE
)

# 00 | setup ----
set.seed(2025)
options(
  mc.cores = max(1, parallel::detectCores() - 1),
  brms.backend = "cmdstanr"
)
here::i_am("analysis/01_driver_analysis.qmd")

# package load
pkgs <- c("tidyverse","readxl","janitor","GGally","sf",
          "brms","cmdstanr","broom.mixed","gtsummary","here","gt", "webshot2")
invisible(lapply(pkgs, require, character.only = TRUE))

# project paths
PATH_XLSX <- here::here("analysis","data","raw","rawfish_eat_Cambodia_2020_2022.xlsx")
PATH_SHP  <- here::here("analysis","data","raw","KHM_adm","KHM_adm4.shp")
OUT_DIR   <- here::here("analysis","outputs")
dir.create(OUT_DIR, showWarnings = FALSE, recursive = TRUE)

# optional: QUICK mode for fast test
# For final manuscript, turn it FALSE.
QUICK <- FALSE
```

```{r data, include=FALSE}
## Analysis
# load data
source(here::here("analysis","R","10_load_clean.R"))

dat_list <- load_and_clean(PATH_XLSX, PATH_SHP, out_dir = OUT_DIR, dry_run = FALSE)
dat <- dat_list$dat
stopifnot(is.data.frame(dat), nrow(dat) > 0)
```

```{r pca, include=FALSE}
# pca to decompose food-neophobia scales
source(here::here("analysis","R","20_pca_scores.R"))
pca_out  <- make_pca(dat, out_dir = OUT_DIR, quick = QUICK, dry_run = FALSE)
long     <- pca_out$long
```

```{r participation.31}
# 必須列チェック（月は不要）

needed <- c("id","district","gender","age_z","novelty_z",
"experience_z","tradition_z","dish_type","consumed")
missing <- setdiff(needed, names(long))
if (length(missing)) {
stop("long に必須列が不足しています: ", paste(missing, collapse=", "))
}

# 参加モデル（month/season 不使用）の読み込み

src_part <- here::here("analysis","R","31_model_participation.R")
if (!file.exists(src_part)) stop("モデル定義ファイルが見つかりません: ", src_part)
source(src_part)

# ===== 交互作用・全部入り版 =====

fit <- fit_participation_interactions(
long,
out_dir = OUT_DIR,
quick = FALSE,
use_monotonic = TRUE,      # q022_ord があれば mo() を使用（無ければ自動スキップ）
use_q022_cat5 = FALSE,     # 感度を見たい時は TRUE に
interact_q022_dish = TRUE, # q022 × dish_type の交互作用も入れる
random_slope = TRUE        # (1 + dish_type | district)
)

# （参考）主効果のみ版を使いたい場合は下を有効化

# fit <- fit_participation(

# long,

# out_dir = OUT_DIR,

# quick = FALSE,

# use_monotonic = TRUE,

# use_q022_cat5 = FALSE,

# interact_q022_dish = FALSE, # 主効果のみ

# random_slope = TRUE         # (1 + dish_type | district) にしたくなければ FALSE

# )
```

<!-- ```{r frequency.41} -->
<!-- # ---- prep: build long_freq from `long` -------------------------------------- -->
<!-- # 必要列: district, gender, age_z, novelty_z, experience_z, tradition_z, dish_type, -->
<!-- # season(dry/rainy), occasion(home/party), frequency -->
<!-- # frequency 列名を推定（最初に見つかったものを使用） -->

<!-- freq_col <- intersect(c("frequency","freq","n_times","count"), names(long)) -->
<!-- if (length(freq_col) == 0) stop("頻度列が見つかりません（frequency/freq/n_times/count など）。") -->
<!-- freq_col <- freq_col[1] -->

<!-- # month→season の補助（必要に応じて現地定義へ調整） -->

<!-- mk_season <- function(month_chr) { -->
<!-- rainy <- c("May","Jun","Jul","Aug","Sep","Oct","5","6","7","8","9","10") -->
<!-- ifelse(month_chr %in% rainy, "rainy", "dry") -->
<!-- } -->




<!-- long_freq <- long %>% -->
<!-- mutate( -->
<!-- season = if ("season" %in% names(.)) as.character(season) -->
<!-- else if ("month" %in% names(.)) mk_season(as.character(month)) -->
<!-- else NA_character_, -->
<!-- occasion = if ("occasion" %in% names(.)) as.character(occasion) else "home" -->
<!-- ) %>% -->
<!-- transmute( -->
<!-- district = district, -->
<!-- gender = gender, -->
<!-- age_z, novelty_z, experience_z, tradition_z, -->
<!-- dish_type, -->
<!-- season = factor(season, levels = c("dry","rainy")), -->
<!-- occasion = factor(occasion, levels = c("home","party")), -->
<!-- frequency = suppressWarnings(as.numeric(.data[[freq_col]])), -->
<!-- livelihood_ord = if ("livelihood_ord" %in% names(.)) livelihood_ord else NA -->
<!-- ) %>% -->
<!-- filter(!is.na(frequency)) -->




<!-- stopifnot(nrow(long_freq) > 0) -->

<!-- # 全部入り（推奨） -->
<!-- source(here::here("analysis","R","41_model_frequency.R")) -->
<!-- fit_freq <- fit_frequency_x( -->
<!--   long_freq, out_dir = OUT_DIR, -->
<!--   use_livelihood_mo = TRUE, # 生業 ordinal があれば mo() 主効果で -->
<!--   interact_liv_season = TRUE, # 交互作用は因子版で安全に -->
<!--   random_slope_set = c("season"), # サブセットで1水準なら自動で外れます -->
<!--   adapt_delta = 0.97 -->
<!-- ) -->
<!-- ``` -->

<!-- ```{r nonconsumption.36} -->
<!-- # 50 | 食べない理由：データ用意 ---- -->
<!-- # 既に 10_load_clean.R 側で dat_raw を返していない想定なので、Excel から読みます。 -->
<!-- # （もし load_and_clean() が dat_raw を返すなら、それを使ってOK） -->
<!-- PATH_XLSX <- here::here("analysis","data","raw","rawfish_eat_Cambodia_2020_2022.xlsx") -->

<!-- # 必要なのは q131/q231/q331 を含むシート（例: "food_custom"） -->



<!-- dat_raw <- readxl::read_excel(PATH_XLSX, sheet = "food_custom", col_names = TRUE) -->

<!-- # 型の取り回しを安定化 -->



<!-- dat_raw <- dat_raw |> -->
<!-- janitor::clean_names() -->

<!-- # 51 | reasons_long を作る ---- -->

<!-- source(here::here("analysis","R","36_reasons_nonconsumption.R")) -->

<!-- # q131/q231/q331 → dish_type×reason_cat のロングに -->

<!-- reasons_long <- extract_reasons_from_raw(dat_raw) -->

<!-- # long 側も id を文字に（joinの安全策） -->

<!-- long <- long |> dplyr::mutate(id = as.character(id)) -->

<!-- # 52 | 多項ロジット（交互作用入り・堅牢版）をフィット ---- -->

<!-- fit_reasons <- fit_reason_model_x( -->
<!--   long, reasons_long, -->
<!--   out_dir = OUT_DIR, -->
<!--   quick = FALSE,            # 速度確認なら TRUE -->
<!--   pool_threshold = 15,      # 希少カテゴリは "other" にプール -->
<!--   add_interactions = TRUE,  # dish×gender, dish×(novelty,tradition), gender×tradition -->
<!--   adapt_delta = 0.97 -->
<!--   ) -->
<!-- ``` -->

<!-- ```{r wtp, include=FALSE} -->
<!-- library(tidyverse) -->

<!-- message("OUT_DIR = ", OUT_DIR) -->
<!-- if (file.exists(OUT_DIR) && !dir.exists(OUT_DIR)) stop("OUT_DIR が“ファイル”です: ", OUT_DIR) -->
<!-- if (!dir.exists(OUT_DIR)) dir.create(OUT_DIR, recursive = TRUE) -->
<!-- # 1) CSV を読み込み → wtp を作成 -->


<!-- wtp_csv <- here::here("analysis","outputs","wtp_data.csv") -->
<!-- if (!file.exists(wtp_csv)) stop("wtp_data.csv が見つかりません: ", wtp_csv) -->
<!-- wtp <- readr::read_csv(wtp_csv, show_col_types = FALSE) -->
<!-- stopifnot(is.data.frame(wtp), "price" %in% names(wtp)) -->

<!-- # 必須列の存在チェック（今回は dish_type と season を使う） -->
<!-- needed <- c("price","dish_type","season") -->
<!-- missing <- setdiff(needed, names(wtp)) -->
<!-- if (length(missing)) stop("WTPデータに不足列があります: ", paste(missing, collapse=", ")) -->

<!-- # 型整備とフィルタ（完全ケース） -->



<!-- wtp <- wtp %>% -->
<!-- transmute( -->
<!-- price = suppressWarnings(as.numeric(price)), -->
<!-- dish_type = as.factor(dish_type), -->
<!-- season = as.factor(season) -->
<!-- ) %>% -->
<!-- filter(!is.na(price), price > 0) %>% -->
<!-- filter(complete.cases(price, dish_type, season)) -->

<!-- if (nrow(wtp) == 0) stop("WTP: 完全ケースが 0 行です（price / dish_type / season を確認）") -->
<!-- if (n_distinct(wtp$dish_type) < 2) stop("dish_type の水準が 1 つしかありません。") -->
<!-- if (n_distinct(wtp$season) < 2) stop("season の水準が 1 つしかありません。") -->

<!-- # 2) モデル関数を読み込み（51_model_wtp.R を使用） -->



<!-- src <- here::here("analysis","R","51_model_wtp.R") -->
<!-- if (!file.exists(src)) stop("モデル定義ファイルが見つかりません: ", src) -->
<!-- source(src) -->
<!-- source(here::here("analysis","R","51_model_wtp.R")) -->

<!-- fit <- fit_wtp_model_x( -->
<!--   wtp, -->
<!--   out_dir = OUT_DIR, -->
<!--   fam_name = "lognormal",   # ← ここ -->
<!--   random_slopes = c(),      # 今回は dish_type と season だけなら空でもOK -->
<!--   add_youme_month_interact = FALSE -->
<!-- ) -->

<!-- ``` -->










<!-- ```{r participation, include=FALSE} -->
<!-- # extensive margins -->
<!-- source(here::here("analysis","R","30_model_participation.R")) -->

<!-- # 主解析（mo; unknown除外） -->
<!-- fit_part <- fit_participation( -->
<!--   long, out_dir = OUT_DIR, quick = FALSE, -->
<!--   use_monotonic = TRUE, use_q022_cat5 = FALSE, -->
<!--   interact_q022_dish = FALSE, random_slope = FALSE -->
<!-- ) -->

<!-- # 感度（5カテゴリ） -->
<!-- # fit_part_5 <- fit_participation( -->
<!-- #   long, out_dir = OUT_DIR, quick = FALSE, -->
<!-- #   use_monotonic = FALSE, use_q022_cat5 = TRUE, -->
<!-- #   interact_q022_dish = FALSE, random_slope = FALSE -->
<!-- # ) -->
<!-- ``` -->

<!-- ```{r nonconsumption, include=FALSE} -->
<!-- # --- 食べない理由（nonconsumption） ------------------------- -->
<!-- library(brms) -->
<!-- source(here::here("analysis","R","35_reasons_nonconsumption.R")) -->

<!-- # dat_raw を用意（10_load_clean.R が返していない場合をカバー） -->
<!-- if (!exists("dat_raw")) { -->
<!--   dat_raw <- readxl::read_excel( -->
<!--     PATH_XLSX, sheet = "food_custom", col_names = TRUE -->
<!--   ) -->
<!-- } -->
<!-- # join 事故を避けるための型整備 -->
<!-- dat_raw <- dat_raw |> -->
<!--   janitor::clean_names() |> -->
<!--   dplyr::mutate(id = as.character(id)) -->

<!-- # 理由ロングを作成 -->
<!-- reasons_long <- extract_reasons_from_raw(dat_raw) |> -->
<!--   dplyr::mutate(id = as.character(id)) -->

<!-- # long 側も id を文字に（型を揃える） -->
<!-- # long 側も id を文字に（型を揃える） -->
<!-- long <-  -->
<!--   long |> -->
<!--   dplyr::mutate(id = as.character(id)) -->

<!-- # （任意）保険：season/occasion が無ければ作る -->
<!-- if (!"season"   %in% names(long)) long$season   <- NA_character_ -->
<!-- if (!"occasion" %in% names(long)) long$occasion <- NA_character_ -->



<!-- # 推定（記述と多項ロジット、図表ファイルが OUT_DIR に出力） -->
<!-- fit_reasons <- fit_reason_model(long, reasons_long, out_dir = OUT_DIR, quick = FALSE) -->


<!-- ``` -->

<!-- ```{r intensive, include=FALSE} -->
<!-- # intensive margins -->
<!-- source(here::here("analysis","R","40_model_frequency.R")) -->

<!-- # ---- load dat_scored (wide; contains q112/q113/... ) ---- -->
<!-- # 既に保存済みなら RDS から、無ければ Excel から読み込み -->
<!-- dat_scored <- tryCatch( -->
<!--   readr::read_rds(here::here("analysis","outputs","dat_scored.rds")), -->
<!--   error = function(e) { -->
<!--     readxl::read_excel( -->
<!--       path = PATH_XLSX,        # 例: analysis/data/raw/rawfish_eat_Cambodia_2020_2022.xlsx -->
<!--       sheet = "food_custom", -->
<!--       col_names = TRUE -->
<!--     ) -->
<!--   } -->
<!-- ) -->

<!-- # 必須キーを文字列に統一（joinトラブル回避） -->
<!-- dat_scored <- dat_scored |> -->
<!--   dplyr::mutate(id = as.character(id)) -->

<!-- # （任意）今後の再現用に保存 -->
<!-- # readr::write_rds(dat_scored, here::here("analysis","outputs","dat_scored.rds")) -->

<!-- fit_freq_so <- fit_frequency_season_occ( -->
<!--   long         = long,        # 共変量入りロング（参加モデルで使ったもの） -->
<!--   dat_raw      = dat_scored,  # q112 等を含むワイド（= あなたの dat_scored） -->
<!--   out_dir      = OUT_DIR, -->
<!--   quick        = FALSE, -->
<!--   random_slope = FALSE,       # (1 + dish_type | district) にしたい時は TRUE -->
<!--   trunc_zero   = FALSE,       # 季節×場面で 0 が自然に出る想定 → 0許容NBが無難 -->
<!--   include_month= FALSE        # 季節・場面が主目的のため既定はOFF -->
<!-- ) -->
<!-- ``` -->

<!-- ```{r wtp, include=FALSE} -->
<!-- # 1) WTPデータ作成（初回だけでOK） -->
<!-- source(here::here("analysis","R","45_make_wtp_data.R")) -->
<!-- wtp_rds <- here::here("analysis","outputs","wtp_data.rds") -->
<!-- if (!file.exists(wtp_rds)) { -->
<!--   save_wtp_rds_from_excel(PATH_XLSX)  # 既に dat_scored がある場合は build_wtp_from_qs(dat_scored) でもOK -->
<!-- } -->

<!-- # 2) WTPモデル -->
<!-- source(here::here("analysis","R","50_model_wtp.R")) -->
<!-- wtp <- readr::read_rds(wtp_rds) -->
<!-- fit_wtp <- fit_wtp_model( -->
<!--   wtp, -->
<!--   out_dir = OUT_DIR, -->
<!--   family = "lognormal",        # 感度で "lognormal" も可 -->
<!--   random_intercept = TRUE, -->
<!--   quick = FALSE -->
<!-- ) -->
<!-- ``` -->

```{r sessioninfo, include=FALSE}
# print session information
sessionInfo()
```

<!-- ```{r } -->
<!-- # 重要度表（寄与率） -->
<!-- # （結果出力チャンク） -->
<!-- readr::read_csv(file.path(OUT_DIR, "pca_importance.csv")) |> -->
<!--   dplyr::select(metric, tidyselect::any_of(c("PC1","PC2","PC3"))) |> -->
<!--   gt::gt() |> -->
<!--   gt::fmt_number(columns = where(is.numeric), decimals = 3) |> -->
<!--   gt::tab_header(title = "PCA Importance (PC1–PC3)") -->

<!-- ``` -->

<!-- ```{r} -->
<!-- knitr::include_graphics(file.path(OUT_DIR, "ppc_participation_bars.png")) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # 表を作成（例：OR表） -->
<!-- library(gt) -->

<!-- tbl_or <- readr::read_csv(file.path(OUT_DIR, "estimates_participation_OR.csv")) |> -->
<!--   dplyr::select(term, OR, OR_l, OR_u) |> -->
<!--   dplyr::mutate(dplyr::across(c(OR, OR_l, OR_u), ~ round(.x, 2))) |> -->
<!--   gt::gt() |> -->
<!--   gt::tab_header(title = "Odds Ratios (95% CI)") -->

<!-- # --- Chrome/Chromium の検出（Windows/macOS/Linuxの代表パスをチェック）--- -->
<!-- candidate_paths <- c( -->
<!--   # Windows -->
<!--   "C:/Program Files/Google/Chrome/Application/chrome.exe", -->
<!--   "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe", -->
<!--   # macOS -->
<!--   "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome", -->
<!--   # Linux -->
<!--   "/usr/bin/google-chrome", -->
<!--   "/usr/bin/chromium", -->
<!--   "/snap/bin/chromium" -->
<!-- ) -->
<!-- found_path <- candidate_paths[file.exists(candidate_paths)][1] -->
<!-- if (!is.na(found_path)) { -->
<!--   options(chromote.chrome = found_path)  # chromote に教える -->
<!-- } -->

<!-- has_chrome <- any(nzchar(Sys.which(c("google-chrome","chromium","chrome")))) || -->
<!--               !is.null(getOption("chromote.chrome")) -->

<!-- # --- 保存：PNGはChromeがある時だけ。必ずHTML/RTFは出す --- -->
<!-- if (isTRUE(has_chrome)) { -->
<!--   ok_png <- try({ -->
<!--     gt::gtsave(tbl_or, filename = file.path(OUT_DIR, "table_OR.png")) -->
<!--     TRUE -->
<!--   }, silent = TRUE) -->
<!--   if (!isTRUE(ok_png)) { -->
<!--     message("[gt] PNG保存に失敗。HTML/RTFへフォールバックします。") -->
<!--   } -->
<!-- } else { -->
<!--   message("[gt] Chrome/Chromium が見つからないため PNG をスキップ。HTML/RTF を保存します。") -->
<!-- } -->

<!-- # フォールバック（常に実行） -->
<!-- gt::gtsave(tbl_or, filename = file.path(OUT_DIR, "table_OR.html")) -->
<!-- gt::gtsave(tbl_or, filename = file.path(OUT_DIR, "table_OR.rtf")) -->
<!-- ``` -->

<!-- ```{r } -->
<!-- if (file.exists(file.path(OUT_DIR, "estimates_frequency_RR.csv"))) { -->
<!--   readr::read_csv(file.path(OUT_DIR, "estimates_frequency_RR.csv")) |> -->
<!--     dplyr::select(term, RR, RR_l, RR_u) |> -->
<!--     dplyr::mutate(dplyr::across(RR:RR_u, ~ round(.x, 2))) |> -->
<!--     gt::gt() |> -->
<!--     gt::tab_header(title = "Rate Ratios (95% CI)") -->
<!-- } -->


<!-- ``` -->

